<templateSet group="React">
  <template name="rcfc" value="import React, { Component } from 'react';&#10;&#10;class $TM_FILENAME_BASE$ extends Component {&#10;       constructor(props) {&#10;               super(props);&#10;&#10;    }&#10;&#10;     componentWillMount() {&#10;&#10;        }&#10;&#10;     componentDidMount() {&#10;&#10; }&#10;&#10;     componentWillReceiveProps(nextProps) {&#10;&#10;   }&#10;&#10;     shouldComponentUpdate(nextProps, nextState) {&#10;&#10; }&#10;&#10;componentWillUpdate(nextProps, nextState) {&#10;&#10;   }&#10;&#10;     componentDidUpdate(prevProps, prevState) {&#10;&#10;    }&#10;&#10;        componentWillUnmount() {&#10;&#10;      }&#10;&#10;     render() {&#10;         return (&#10;                   &lt;div&gt;&#10;&#10;                      &lt;/div&gt;&#10;               );&#10; }&#10;}&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class and all lifecycle methods and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="importreact" value="import * as React from 'react'" description="Import * as React from 'react'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fncmp" value="import React, { FunctionComponent } from 'react';&#10;&#10;const $TM_FILENAME_BASE$: FunctionComponent&lt;IProps&gt; = ({}) =&gt; {&#10;  return &lt;&gt;$END$&lt;/&gt;;&#10;};&#10;&#10;interface IProps {}&#10;&#10;export default $TM_FILENAME_BASE$;&#10;" shortcut="SPACE" description="Creates a typescript functional component" toReformat="false" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="uses" value="const [$STATE$, use$STATE_UPPER_FIRST$] = useState($END$);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="STATE_UPPER_FIRST" expression="capitalize(STATE)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="sc" value="import styled from 'styled-components';" shortcut="SPACE" description="styled-components" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="scd" value="const $NAME$ = styled.div`&#10;  $END$&#10;`;" description="styled-components div" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>